cp ~/datag2/NEW_LIDAR_PAPER_SIMS_2/sitka/S[A,E]30.singleTree.needleFib.obj .

sed 's/material1/branch/g' < SE5.singleTree.needleFib.obj | sed 's/material2/branch/g' > x
mv x  SE5.singleTree.needleFib.obj


########## GET RID OF PLANE IN OBJ FILE ################

set obj =  SE5.singleTree.needleFib.obj

echo 16 0 0 1000 10 10 256 256 1 $obj.zbuf | nice +19 start -v $obj

./tls -RATv -origin 5000 0 500 -theta -4.5 4.5 0.01 -phi -4.5 4.5 0.01 -image x.hips SE5.singleTree.needleFib.obj > xx

./tls -RATv -origin 5000 0 500 -theta 0 4.5 0.01 -phi 0 4.5 0.01 -image x.hips SE5.singleTree.needleFib.obj > xx


./tls -RATv -origin 10000 0 500 -theta 0 5 0.05 -phi -5 5 0.05 -image x.hips SE5.singleTree.needleFib.obj > xx

./tls -RATv -origin 10 0 0.5 -theta -3 3 0.01 -phi -3 3 0.01 -image x.hips test.obj > yy

./tls -RATv -origin 10 0 1 -theta -6 6 0.05 -phi -6 6 0.05 -image x.hips test2.obj > y

./tls -RATv -origin 10 0 1 -theta -6 6 0.05 -phi -6 6 0.05 -image x.hips -rpp 20 -fov 0.1 test2.obj > yy

# sort file and get needles off
foreach f ( S*.singleTree.needleFib.obj )
	sed 's/material1/branch/g' < $f | sed 's/material2/branch/g' > x
	mv x $f
        gawk < $f '{if($1=="clone"&&gsub("needletwig","needletwig")) ;else print}' > $f.needle_off
end


(time ./tls -RATv -origin 20000 0 1500 -theta -4.2 42 0.1 -phi -11.5 11.5 0.1 -image SE30.singleTree.needleFib.obj.tls.hips SE30.singleTree.needleFib.obj > SE30.singleTree.needleFib.obj.tls.dat) >& SE30.singleTree.needleFib.obj.tls.log &

nice +19 ./run_tls.py -l locations.dat
nice +19 ./run_tls.py -l locations.dat
nice +19 ./run_tls.py -l locations.dat
nice +19 ./run_tls.py -l locations.dat

# default input dir is opdir, obj = SE30.singleTree.needleFib.obj
./sort_it.py

# output file is generated by obj file and locations
./sort_it.py -l locations.dat.2 --obj SE30.singleTree.needleFib.obj -d opdir

# generate scan locations - default op is locations.all.dat
./gen_scans.py

# generate subsets for processing when all scans are done - default is sort.subset.?.locations.all.dat
 ./gen_scans.py -sort

# sort out multiple scans for multiple object files
./doSort &


find opdir.locations.all.dat -name "*.grabme" -print | wc -l
find opdir.locations.all.dat -name "*.grabme" -print | xargs ls -lt | head -10


# default input dir is opdir, obj = SE30.singleTree.needleFib.obj
./sort_it.py

# output file is generated by obj file and locations
./sort_it.py -l locations.dat -obj xx.obj -d ipdir

set obj = SE30.singleTree.needleFib.obj
nice +19 ./run_tls.py -l locations.all.dat -o opdir.$obj --obj $obj &
nice +19 ./run_tls.py -l locations.all.dat -o opdir.$obj --obj $obj &
nice +19 ./run_tls.py -l locations.all.dat -o opdir.$obj --obj $obj &

# get cyl sizes from high up
gawk '{if($4>16000)l=NR;if(l>100&&(NR==(l+1)||NR==(l+2)))print;}' < SE30.singleTree.needleFib.obj | grep cyl > xx

./sort_it.py -l locations.dat.2 --obj SE30.singleTree.needleFib.obj.needle_off -d opdir.no_needles

set obj = SE30.singleTree.needleFib.obj.needle_off
nice +19 ./run_tls.py -l locations.all.dat -o opdir.$obj --obj $obj &
nice +19 ./run_tls.py -l locations.all.dat -o opdir.$obj --obj $obj &
nice +19 ./run_tls.py -l locations.all.dat -o opdir.$obj --obj $obj &

set obj = SA30.singleTree.needleFib.obj
edit startMe
./startMe

find opdir.SA30.singleTree.needleFib.obj.locations.all.dat -name "*.grabme" | xargs wc -l | tail -1

